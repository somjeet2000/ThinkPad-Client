pipeline {
    agent none  // No global agent, as we use different agents per stage

    parameters {
        choice(name: 'Environment', choices: ['Development', 'Production'], description: 'Choose the environment to build')
        choice(name: 'Branch', choices: ['main', 'development', 'Others'], description: 'Select branch')
        string(name: 'Others', defaultValue: '', description: 'Specify branch name if Others is selected')
    }

    environment {
        DOCKER_HOST = 'tcp://host.docker.internal:2375'
        NETLIFY_AUTH_TOKEN = credentials('netlify-auth-token')
        DEV_SITE_ID = 'efd65b24-988f-43c8-be64-9a86aba14b42'
        PROD_SITE_ID = 'b75a440e-3888-4c72-83b1-76ea469517b7'
        WORKSPACE_DIR = "/workspace"
    }

    stages {

        stage('Clean Workspace') {
            agent {
                docker {
                    image 'node:20-alpine'
                    args '--user root -v $PWD:/workspace'
                }
            }
            steps {
                script {
                    sh "rm -rf $WORKSPACE_DIR/*"
                    echo 'âœ… Workspace Cleaned.'
                }
            }
        }

        stage('Code Checkout') {
            agent {
                docker {
                    image 'node:20-alpine'
                    args '--user root -v $PWD:/workspace'
                }
            }
            steps {
                script {
                    // Check if Branch is selected as Others, and Others is empty
                    if(params.Branch == 'Others' && !params.Others?.trim()) {
                        error "Branch Name is required when selected Others as Branch"
                    }

                    def branchToSelect = params.Branch == 'Others' ? params.Others.trim() : params.Branch
                    checkout scmGit(
                        branches: [[name: "*/${branchToSelect}"]],
                        extensions: [],
                        userRemoteConfigs: [[url: 'https://github.com/somjeet2000/ThinkPad-Client.git']]
                    )
                }
            }
        }

        stage('Install Dependencies & Build Application') {
            agent {
                docker {
                    image 'node:20-alpine'
                    args '--user root -v $PWD:/workspace'
                }
            }
            steps {
                script {
                    sh """
                        cd $WORKSPACE_DIR
                        rm -rf node_modules build
                        npm cache clean --force
                        npm ci

                        if [ "${params.Environment}" = "Development" ]; then
                            cp .env.development .env.production
                            echo 'âœ… Using Development Environment Variables'
                        else
                            cp .env.production .env.production
                            echo 'âœ… Using Production Environment Variables'
                        fi

                        CI=false npm run build
                    """
                    echo 'âœ… Project Built Successfully.'
                }
            }
        }

        stage('Deploy to Netlify Service') {
            agent {
                docker {
                    image 'node:20-alpine'
                    args '--user root -v $PWD:/workspace'
                }
            }
            steps {
                script {
                    sh 'npm install -g netlify-cli'
                    echo 'Netlify CLI Installed Successfully'
                    def siteId = params.Environment == 'Development' ? env.DEV_SITE_ID : env.PROD_SITE_ID
                    sh "netlify deploy --prod --auth ${NETLIFY_AUTH_TOKEN} --site ${siteId} --dir $WORKSPACE_DIR/build"
                    echo "ðŸš€ Deployed to ${params.Environment}."
                }
            }
        }
    }
}