/*
Requirements:
    Branch Specific:- 
        main branch needs to be deployed in Development environment. main -> Development
        Jenkinsfile should be updated in the only in main branch.   Jenkinsfile -> main
        Release branches will be deployed into Production environment.  1.0.0.25.02 -> Production

    Stages:-
        1. Clean workspace
        2. Code Checkout
        3. Static Code Analysis by Sonarqube
        4. SonarQube Quality Gate
        5. Install Dependencies
        6. Build Application
        7. Deploy to Netlify Service
        8. Post Stages

    Future Scopes:-
        1. If any error in the SonarQube Code Analysis, the proper report should be sent to an email.
        2. Post deployment, the confirmation will be send through an email.
*/

pipeline {
    agent any

    parameters {
        choice(name: 'Environment', choices: ['Development', 'Production'], description: 'Select deployment environment')
        choice(name: 'Branch', choices: ['main', 'development', 'Others'], description: 'Select branch')
        string(name: 'Others', defaultValue: '', description: 'Specify branch name if Others is selected')
    }

    // Mention the Environment variables
    environment {
        NETLIFY_AUTH_TOKEN = credentials('netlify-auth-token')
        DEVELOPMENT_SITE_ID = 'b75a440e-3888-4c72-83b1-76ea469517b7'
        PRODUCTION_SITE_ID = '40d44ad4-cc39-4654-ba54-0f9e34214b13'
    }

    // Stages will run to build the pipeline
    stages {

        // Stage 1: Clean Workspace
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        // Stage 2: Code Checkout
        stage('Code Checkout') {
            steps {
                script {
                    // Check if Branch is selected as Others, and Others is empty
                    if(params.Branch == 'Others' && !params.Others?.trim()) {
                        error "Branch Name is required when selected Others as Branch"
                    }

                    // Determine the Branch to select
                    def branchToSelect = params.Branch == 'Others' ? params.Others.trim() : params.Branch

                    checkout scmGit(
                        branches: [[name: "*/${branchToSelect}"]], 
                        extensions: [], 
                        userRemoteConfigs: [[url: 'https://github.com/somjeet2000/ThinkPad-Client.git']])
                }
            }
        }

        // Stage 3: Static Code Analysis

        // Stage 4: SonarQube Quality Gate

        // Stage 5: Build Application
        stage('Install Dependencies & Build Application') {
            agent {
                docker {
                    image 'node:20-alpine'
                    args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                script {
                    def BUILD_ENV = params.Environment == 'Development' ? 'development' : 'production'
                    echo "üöÄ Building with Environment: ${BUILD_ENV}"

                    sh """
                        npx update-browserslist-db@latest
                        npm ci
                        export NODE_ENV=${BUILD_ENV}
                        export REACT_APP_ENV=${BUILD_ENV}
                        CI=false npm run build
                    """
                    echo '‚úÖ Project Built Successfully.'
                }
            }
        }
        
        // Stage 6: Deploy to Netlify Service
        stage('Deploy to Netlify Service') {
            agent {
                docker {
                    image 'node:20-alpine'
                    args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                script {
                    def publishDir = 'build'
                    sh 'npm install -g netlify-cli'
                    echo 'Netlify CLI Installed Successfully'
                    def siteId = params.Environment == 'Development' ? DEVELOPMENT_SITE_ID : PRODUCTION_SITE_ID
                    sh "netlify deploy --prod --auth ${NETLIFY_AUTH_TOKEN} --site ${siteId} --dir $publishDir"
                    echo "üöÄ Deployed to ${params.Environment}."
                }
            }
        }
    }

    post {
        success {
            script {
                mail to: 'somjeetsrimani@gmail.com',
                    subject: "‚úÖ Deployment Successful: ${env.JOB_NAME}",
                    body: "The deployment to ${params.Environment} environment from Branch: ${params.Branch == 'Others' ? params.Others : params.Branch} was successful.\n\nCheck Jenkins for more details: ${env.BUILD_URL}"
            }
        }
        failure {
            script {
                mail to: 'somjeetsrimani@gmail.com',
                    subject: "‚ùå Deployment Failed: ${env.JOB_NAME}",
                    body: "The deployment to ${params.Environment} environment from Branch: ${params.Branch == 'Others' ? params.Others : params.Branch} failed.\n\nCheck logs for details: ${env.BUILD_URL}"
            }
        }
    }
}