/*
Requirements:
    Branch Specific:- 
        main branch needs to be deployed in Production environment. main -> Production
        Jenkinsfile should be updated in the only in main branch.   Jenkinsfile -> main

    Stages:-
        1. Clean workspace
        2. Code Checkout
        3. Static Code Analysis by Sonarqube
        4. SonarQube Quality Gate
        5. Install Dependencies
        6. Build Application
        7. Deploy to Netlify Service
*/

pipeline {
    agent any

    parameters {
        choice(name: 'Environment', choices: ['Development', 'Production'], description: 'Choose the environment to build')
        choice(name: 'Branch', choices: ['main', 'development', 'Others'], description: 'Select branch')
        string(name: 'Others', defaultValue: '', description: 'Specify branch name if Others is selected')
    }

    // Mention the Environment variables
    environment {
        // Host Docker Connection
        DOCKER_HOST = 'tcp://host.docker.internal:2375'

        // Netlify Credentials
        NETLIFY_AUTH_TOKEN = credentials('netlify-auth-token')
        DEV_SITE_ID = 'efd65b24-988f-43c8-be64-9a86aba14b42'
        PROD_SITE_ID = 'b75a440e-3888-4c72-83b1-76ea469517b7'
    }

    // Stages will run to build the pipeline
    stages {

        // Stage 1: Clean Workspace
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        // Stage 2: Code Checkout
        stage('Code Checkout') {
            steps {
                script {
                    // Check if Branch is selected as Others, and Others is empty
                    if(params.Branch == 'Others' && !params.Others?.trim()) {
                        error "Branch Name is required when selected Others as Branch"
                    }

                    // Determine the Branch to select
                    def branchToSelect = params.Branch == 'Others' ? params.Others.trim() : params.Branch

                    checkout scmGit(
                        branches: [[name: "*/${branchToSelect}"]], 
                        extensions: [], 
                        userRemoteConfigs: [[url: 'https://github.com/somjeet2000/ThinkPad-Client.git']])
                }
            }
        }

        // Stage 3: Static Code Analysis

        // Stage 4: SonarQube Quality Gate

        // Stage 5: Prepare environment
        stage('Prepare Environment') {
            steps {
                script {
                    if (params.Environment == 'Development') {
                        sh 'cp .env.development .env'
                        echo 'Using development environment variables.'
                    } else if (params.Environment == 'Production') {
                        sh 'cp .env.production .env'
                        echo 'Using production environment variables.'
                    } else {
                        error 'Invalid environment selected.'
                    }
                }
            }
        }

        // Stage 5: Build Application
        stage('Install Dependencies & Build Application') {
            agent {
                docker {
                    image 'node:20-alpine'
                    args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                script {
                    sh """
                        npx update-browserslist-db@latest
                        npm ci
                        CI=false npm run build
                    """
                    echo 'âœ… Project Built Successfully.'
                }
            }
        }

        // Stage 6: Deploy to Netlify Service
        stage('Deploy to Netlify Service') {
            agent {
                docker {
                    image 'node:20-alpine'
                    args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                script {
                    def publishDir = 'build'
                    sh 'npm install -g netlify-cli'
                    echo 'Netlify CLI Installed Successfully'
                    def siteId = params.Environment == 'Development' ? env.DEV_SITE_ID : env.PROD_SITE_ID
                    sh "netlify deploy --prod --auth ${NETLIFY_AUTH_TOKEN} --site ${siteId} --dir $publishDir"
                    echo "ðŸš€ Deployed to ${params.Environment}."
                }
            }
        }
    }
}